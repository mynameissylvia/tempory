import sys, os
import numpy as np
from keras.utils import to_categorical
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Activation, Flatten, Dropout, LeakyReLU
from keras.layers import Conv2D, MaxPooling2D, AveragePooling2D
from keras.layers import BatchNormalization
from keras import losses
from keras import optimizers
from keras.callbacks import CSVLogger, ModelCheckpoint

def DNN(x_train_m,y_train_m):
    
    model = Sequential()
    model.add(Flatten(input_shape=(40,40,1)))

    model.add(Dense(550))
    model.add(LeakyReLU(alpha=0.03))
    model.add(BatchNormalization())
    model.add(Dropout(0.5))
    model.add(Dense(512))
    model.add(LeakyReLU(alpha=0.03))
    model.add(BatchNormalization())
    model.add(Dropout(0.5))
    model.add(Dense(1024))
    model.add(Activation('relu'))
    model.add(Dropout(0.3))
    model.add(Dense(7))
    model.add(Activation('softmax'))

    model.compile(optimizer='adam',
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])
    print(model.summary())
    print('Training ------------')
    model.fit(x_train_m, y_train_m,validation_split = 0.2, epochs=30, batch_size=128,verbose = 2)
    model.save('DNN.h5')
    
def CNN(x_train_m,y_train_m):

    model2 = Sequential()
    model2.add(Conv2D(filters = 64,
                     kernel_size = (4,4),
                     padding = 'same',
                     input_shape =(40,40,1),
                     activation = 'relu'))
    model2.add(Dropout(0.5))
    model2.add(MaxPooling2D((4,4)))  
    model2.add(Conv2D(filters = 64,
                     kernel_size = (4,4),
                     padding = 'same',
                     activation = 'relu'))
    model2.add(MaxPooling2D(pool_size=(2,2))) 
    model2.add(Dropout(0.3))
    model2.add(Flatten())
    model2.add(Dense(1024))
    model2.add(Activation('relu'))
    model2.add(Dropout(0.3))
    model2.add(Dense(7))
    model2.add(Activation('softmax'))
    model2.compile(optimizer='adam',
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])
    print('Training ------------')
    model2.fit(x_train_m, y_train_m,validation_split = 0.2, epochs=30, batch_size=128,verbose = 2)
    model2.save('CNN.h5')
